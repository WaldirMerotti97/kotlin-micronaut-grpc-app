environment: Dev

grpc:
  server:
    port: 50052

micronaut:
  application:
    name: lojaCarto
  server:
    port: ${MICRONAUT_SERVER_PORT:`10020`}

#datasources:
#  default:
#    url: jdbc:postgresql://localhost:5432/postgres
#    driverClassName: org.postgresql.Driver
#    username: postgres
#    password: ''
#
#tracing:
#  jaeger:
#    enabled: ${JEAGER_ENABLE:`true`}
#    sender:
#      agentHost: ${JEAGER_AGENT_HOST`localhost`}
#      agentPort: ${JEAGER_AGENT_PORT:`6831`}
#    sampler:
#      probability: 0.1
#
#redis:
#  uri: ${REDIS_URI:`redis://localhost:6379`}
#  caches:
#    statement-cache:
#      #expire one hour after write
#      expire-after-write: 1h
#      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer

kafka:
  enable:
    idempotence: ${KAFKA_ENABLE_IDEMPOTENCE:true}
#  health:
#    enabled: ${KAFKA_HEALTH_ENABLED:true}
  bootstrap:
    servers: S{KAFKA_BOOTSTRAP_SERVERS:`localhost:9092`}
  producers:
    command-transfer:
      key:
        serializer: org.apache.kafka.common.serialization.StringSerializer
      value:
        serializer: br.com.itau.cert.client.serializers.KCertAvroSerializer
      command-request-account-statement:
        key:
          serializer: org.apache.kafka.common.serialization.StringSerializer
        value:
          serializer: br.com.itau.cert.client.serializers.KCertAvroSerializer
  consumers:
    group-transfer-consumer-group:
      key:
        deserializer: org.apache.kafka.common.serialization.StringSerializer
      value:
        deserializer: br.com.itau.cert.client.serializers.KCertAvroSerializer
    schema:
      registry:
        url: ${KAFKA_SCHEMA_REGISTRY:`http://localhost:8081`}
    value:
      subject:
        name:
          strategy: ${KAFKA_VALUE_SUBJECT_NAME_STRATEGY:io.confluent.kafka.serializers.subject.TopicRecordNameStrategy}
    specific:
      avro:
        reader: ${KAFKA_SPECIFIC_AVRO_READER:true}
    auto:
      register:
        schemas: ${KAFKA_AUTO_REGISTER_SCHEMAS:true}
    security:
      protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
    linger:
      ms: ${KAFKA_LINGER_MS:0}
    batch:
      size: ${KAFKA_BATCH_SIZE:16384}
    compression:
      type: ${KAFKA_COMPRESSION_TYPE:LZ4}
    default:
      retries: 5

#kaas:
#  cert:
#    client:
#      user: ${KAAS_CERT_CLIENT_USER:CPS655U}
#      password: ${KAAS_CERT_CLIENT_PASS:orangestack@ey5}
#    environment: ${KAAS_CERT_ENV:SANDBOX}


