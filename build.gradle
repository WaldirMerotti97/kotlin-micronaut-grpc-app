import com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.30"
    id "org.jetbrains.kotlin.kapt" version "1.4.30"
    id "org.jetbrains.kotlin.plugin.allopen"  version "1.4.30"
    id"com.github.johnrengelman.shadow" version "6.1.0"
    id "io.micronaut.application" version "1.4.2"
    id "com.google.protobuf" version "0.8.13"
    id "com.commercehub.gradle.plugin.avro-base" version "0.9.1"
    id "jacoco"
//    id "info.solidsoft.pitest" version '1.6.0'
}

version = "0.1"
group = "com.itau"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.itau.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.grpc:micronaut-grpc-runtime")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("javax.annotation:javax.annotation-api")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("io.micronaut.redis:micronaut-redis-lettuce")
    implementation("io.micronaut.kafka:micronaut-kafka")
    implementation("io.micronaut.kafka:micronaut-kafka-streams")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-tracing")
    implementation("io.micronaut.cache:micronaut-cache-noop")
    runtimeOnly("io.jaegertracing:jaeger-thrift")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    runtimeOnly("org.postgresql:postgresql")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("io.micronaut:micronaut-http-client")

}


application {
    mainClass.set("com.itau.ApplicationKt")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask){
    source("src/main/avro")
    outputDir = file("build/generated/source/avro/main/java")
    fieldVisibility = "PUBLIC"
}

tasks {
    compileKotlin {
        dependsOn(generateAvro)
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        dependsOn(generateAvro)
        kotlinOptions {
            jvmTarget = "11"
        }
    }


}
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/grpckt'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/avro/main/java'
        }
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:3.14.0" }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.33.1"
        }
        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:1.0.0"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            grpckt {}
        }
    }
}
